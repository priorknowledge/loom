import "distributions/io/schema.proto";

package protobuf.loom;

//----------------------------------------------------------------------------
// ProductModel

message ProductModel {
  message Shared {
    required distributions.Clustering clustering = 1;
    repeated distributions.BetaBernoulli.Shared bb = 2;
    repeated distributions.DirichletDiscrete.Shared dd = 3; // ordered by increasing dim
    repeated distributions.DirichletProcessDiscrete.Shared dpd = 4;
    repeated distributions.GammaPoisson.Shared gp = 5;
    repeated distributions.BetaNegativeBinomial.Shared bnb = 6;
    repeated distributions.NormalInverseChiSq.Shared nich = 7;
  }

  message HyperPrior {
    repeated distributions.Clustering clustering = 1;
    optional distributions.BetaBernoulli.GridPrior bb = 2;
    optional distributions.DirichletDiscrete.GridPrior dd = 3;
    optional distributions.DirichletProcessDiscrete.GridPrior dpd = 4;
    optional distributions.GammaPoisson.GridPrior gp = 5;
    optional distributions.BetaNegativeBinomial.GridPrior bnb = 6;
    optional distributions.NormalInverseChiSq.GridPrior nich = 7;
  }

  message SparseValue {
    repeated bool observed = 1;
    repeated bool booleans = 2;  // including bb
    repeated uint32 counts = 3;  // including dd, dpd, gp, bnb
    repeated float reals = 4;  // including nich
  }

  message Group {
    required uint64 count = 1;
    repeated distributions.BetaBernoulli.Group bb = 2;
    repeated distributions.DirichletDiscrete.Group dd = 3;
    repeated distributions.DirichletProcessDiscrete.Group dpd = 4;
    repeated distributions.GammaPoisson.Group gp = 5;
    repeated distributions.BetaNegativeBinomial.Group bnb = 6;
    repeated distributions.NormalInverseChiSq.Group nich = 7;
  }
}

//----------------------------------------------------------------------------
// CrossCat

message CrossCat {
  message Kind {
    required ProductModel.Shared product_model = 1;
    repeated uint32 featureids = 2;
  }

  message HyperPrior {
    optional ProductModel.HyperPrior inner_prior = 1;
    repeated distributions.Clustering outer_prior = 2;
  }

  repeated Kind kinds = 1;
  required distributions.Clustering feature_clustering = 2;
  optional HyperPrior hyper_prior = 3;
}

message SparseRow {
  required uint64 id = 1;
  required ProductModel.SparseValue data = 2;
}

message Assignment {
  required uint64 rowid = 1;
  repeated uint32 groupids = 2;
}

message PosteriorEnum {
  message Group {
    repeated uint32 rowids = 1;
  }
  message Kind {
    repeated uint32 featureids = 1;
    repeated Group groups = 2;
  }
  message Sample {
    repeated Kind kinds = 1;
    optional float score = 2;
  }
}

//----------------------------------------------------------------------------
// Config

message Config
{
  message Schedule
  {
    required float extra_passes = 1;
    required float small_data_size = 2;
    required float big_data_size = 3;
    required uint32 max_reject_iters = 4;
    required float checkpoint_period_sec = 5;
  }
  message Kernels
  {
    message Cat
    {
      required uint32 empty_group_count = 1;
      required uint32 row_queue_capacity = 2;
      required uint32 parser_threads = 3;
    }
    message Hyper
    {
      required bool run = 1;
      required bool parallel = 2;
    }
    message Kind
    {
      required uint32 iterations = 1;
      required uint32 empty_kind_count = 2;
      required uint32 row_queue_capacity = 3;
      required uint32 parser_threads = 4;
      required bool score_parallel = 5;
    }

    required Cat cat = 1;
    required Hyper hyper = 2;
    required Kind kind = 3;
  }
  message PosteriorEnum
  {
    required uint32 sample_count = 1;
    required uint32 sample_skip = 2;
  }
  message Generate
  {
    required uint64 row_count = 1;
    required float density = 2;
  }

  required uint64 seed = 1;
  required Schedule schedule = 2;
  required Kernels kernels = 3;
  required PosteriorEnum posterior_enum = 4;
  required Generate generate = 5;
}

//----------------------------------------------------------------------------
// Checkpoint

message Checkpoint
{
  message Schedule {
    required double annealing_state = 1;
    required uint64 row_count = 2;
    required uint64 reject_iters = 3;
  };

  message StreamInterval {
    required uint64 unassigned_pos = 1;
    required uint64 assigned_pos = 2;
  };

  required bool finished = 1;
  required uint64 seed = 2;
  required uint64 tardis_iter = 3;
  required Schedule schedule = 4;
  required uint64 row_count = 5;
  required StreamInterval rows = 6;
}

//----------------------------------------------------------------------------
// LogMessage

message LogMessage
{
  message Rusage
  {
    required uint64 max_resident_size_kb = 1;
    required double user_time_sec = 2;
    required double sys_time_sec = 3;
  }

  message Args
  {
    message Summary
    {
      required distributions.Clustering model_hypers = 1;
      repeated distributions.Clustering kind_hypers = 2;
      repeated uint32 feature_counts = 3;
      repeated uint32 category_counts = 4;
    }
    message Scores
    {
      optional float score = 1;
      optional float kl_divergence = 2;
      optional uint64 total_object_count = 3;
      optional uint64 assigned_object_count = 4;
      repeated float features = 5;
    }
    message KernelStatus
    {
      message Cat {
        required uint64 total_time = 1;
      }
      message Hyper {
        required uint64 total_time = 1;
      }
      message Kind
      {
        required uint64 total_count = 1;
        required uint64 change_count = 2;
        required uint64 birth_count = 3;
        required uint64 death_count = 4;
        required uint64 score_time = 5;
        required uint64 sample_time = 6;
        required uint64 total_time = 7;
      }
      message ParCat {
        repeated uint64 times = 1;
        repeated uint64 counts = 2;
      }

      optional Cat cat = 1;
      optional Hyper hyper = 2;
      optional Kind kind = 3;
      optional ParCat parcat = 4;
    }

    optional uint32 iter = 1;
    optional Summary summary = 2;
    optional Scores scores = 3;
    optional KernelStatus kernel_status = 4;
  }

  required uint64 timestamp_usec = 1;
  required Rusage rusage = 2;
  required Args args = 3;
}

//----------------------------------------------------------------------------
// PreQL

message PreQL {
  message Predict {
    message Query {
      required string id = 1;
      required ProductModel.SparseValue data = 2;
      repeated bool to_predict = 3;
      required uint32 sample_count = 4;
    }
    message Result {
      required string id = 1;
      optional string error = 2;
      repeated ProductModel.SparseValue samples = 3;
    }
  }
}
